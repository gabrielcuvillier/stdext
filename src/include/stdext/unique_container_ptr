// Copyright (c) 2019 - Gabriel Cuvillier, Continuation Labs (www.continuation-labs.com)
// Licensed under the MIT License.

#ifndef STDEXT_UNIQUE_CONTAINER_PTR_H
#define STDEXT_UNIQUE_CONTAINER_PTR_H

// std
#include <memory>  // std::unique_ptr

namespace stdext
{
template<typename T>
struct container_deleter
{
  void operator()( T* ipContainer )
  {
    if ( ipContainer != nullptr ) {
      for ( auto* apElement : *ipContainer ) {
        if ( apElement != nullptr ) {
          delete apElement;
          apElement = nullptr;
        }
      }
      delete ipContainer;
    }
  }
};

template<typename T>
using unique_container_ptr = std::unique_ptr<T, container_deleter<T>>;
}  // namespace stdext

#endif
