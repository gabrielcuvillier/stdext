// Copyright (c) 2019 - Gabriel Cuvillier, Continuation Labs (www.continuation-labs.com)
// Licensed under the MIT License.

#ifndef STDEXT_ERROR_H
#define STDEXT_ERROR_H

// stdext
#include <stdext/enum_to_string>
#include <stdext/stdext>

// std
#include <string>        // std::string
#include <system_error>  // std::error_condition, std::error_category
#include <typeinfo>      // typeid

#if defined( _WIN32 )    // also includes MinGW
#include <windows.h>     // HRESULT, FAILED
#endif

namespace stdext
{
void install_unhandled_exception_handler();

// Enumeration Error Category, parametrized by an error enumeration class
template<typename T>
class EnumErrorCategory : public std::error_category
{
public:
  [[nodiscard]] static std::error_category const& Singleton()
  {
    static EnumErrorCategory<T> g_category;
    return g_category;
  }

  [[nodiscard]] const char* name() const noexcept override { return typeid( T ).name(); }

  [[nodiscard]] std::string message( int ev ) const override { return enum_to_string( static_cast<T>( ev ) ); }
};

// OK: alias for "No Error"
const inline std::error_condition OK;

// InternalError enumeration class
enum class InternalError {
  AssertionFailed = 1  // only "AssertionFailed" for now
};

// Generic error condition creation, parametrized by an error enumeration class
template<typename T>
[[nodiscard]] std::error_condition make_error_condition( T err )
{
  return std::error_condition{static_cast<int>( err ), EnumErrorCategory<T>::Singleton()};
}

// Specialization of enum_to_string for InternalError enumeration class
template<>
[[nodiscard]] const char* enum_to_string( InternalError err );

// check validity of an input
template<typename T>
[[nodiscard]] inline bool check_valid( T val )
{
  return !val;
}

// Specialization for std::error_condition
template<>
[[nodiscard]] inline bool check_valid( std::error_condition val )
{
  // NB: this is not very intuitive: a std::error_condition is valid if it is stdext::OK (0)
  return ( val == stdext::OK ) ? false : true;
}

#if defined( _WIN32 )  // also includes MinGW
// Specialization for HRESULT
template<>
[[nodiscard]] inline bool check_valid( HRESULT val )
{
  // NB: this is not very intuitive: a HRESULT is valid if it is S_OK (0) or S_FALSE (1) => use FAILED macro
  return ( FAILED(val) ) ? false : true;
}
#endif

void PRINTERROR( const char* file, int line, int col, const char* func, const char* message );

template<typename T>
[[nodiscard]] inline std::error_condition check_failure( T val,
                                                         const bool silent = false,
                                                         const char* const file = stdext_FILE,
                                                         const int line = stdext_LINE,
                                                         const int column = stdext_COLUMN,
                                                         const char* const func = stdext_FUNCTION )
{
  if ( !check_valid( val ) ) {
    auto new_error = make_error_condition( InternalError::AssertionFailed );
    if ( !silent ) {
      PRINTERROR( file, line, column, func, new_error.message().c_str() );
    }
    return new_error;
  } else {
    return stdext::OK;
  }
}

void EPICFAIL_RET();

void EPICFAIL_CRASH();

void EPICFAIL_RET_VOID();

void EPICFAIL_RET_INT();

void EPICFAIL_LOOP();

void EPICFAIL_LOOP_BREAK();

void EPICFAIL_NOP();

}  // namespace stdext

namespace std
{
template<>
struct is_error_condition_enum<stdext::InternalError> : true_type
{
};
}  // namespace std

#define ASSERT( expression )                              \
  if ( auto err = stdext::check_failure( expression ) ) { \
    stdext::EPICFAIL_RET();                               \
    return err;                                           \
  }
#define ASSERT_DEBUG( expression ) ASSERT( expression )
#define ASSERT_CRASH( expression )             \
  if ( stdext::check_failure( expression ) ) { \
    stdext::EPICFAIL_CRASH();                  \
    std::terminate();                          \
  }
#define ASSERT_RET_VOID( expression )          \
  if ( stdext::check_failure( expression ) ) { \
    stdext::EPICFAIL_RET_VOID();               \
    return;                                    \
  }
#define ASSERT_RET_ONE( expression )           \
  if ( stdext::check_failure( expression ) ) { \
    stdext::EPICFAIL_RET_INT();                \
    return 1;                                  \
  }
#define ASSERT_RET_ZERO( expression )          \
  if ( stdext::check_failure( expression ) ) { \
    stdext::EPICFAIL_RET_INT();                \
    return 0;                                  \
  }
#define ASSERT_RET_FALSE( expression )         \
  if ( stdext::check_failure( expression ) ) { \
    stdext::EPICFAIL_RET_INT();                \
    return false;                              \
  }
#define ASSERT_RET_NULL( expression )          \
  if ( stdext::check_failure( expression ) ) { \
    stdext::EPICFAIL_RET_INT();                \
    return nullptr;                            \
  }
#define ASSERT_LOOP( expression )              \
  if ( stdext::check_failure( expression ) ) { \
    stdext::EPICFAIL_LOOP();                   \
    continue;                                  \
  }
#define ASSERT_LOOP_BREAK( expression )        \
  if ( stdext::check_failure( expression ) ) { \
    stdext::EPICFAIL_LOOP_BREAK();             \
    break;                                     \
  }
#define ASSERT_NOP( expression )               \
  if ( stdext::check_failure( expression ) ) { \
    stdext::EPICFAIL_NOP();                    \
    (void)0;                                   \
  }

#endif
